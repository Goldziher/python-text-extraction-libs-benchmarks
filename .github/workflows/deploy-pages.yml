name: Deploy Results to GitHub Pages

on:
  workflow_run:
    workflows: ["Benchmark by Framework"]
    types:
      - completed
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Dependencies
        run: |
          uv sync --all-packages --all-extras --dev

      - name: Download Benchmark Artifacts
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: benchmark-*
          path: downloaded-results/

      - name: Download Latest Benchmark Artifacts
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        run: |
          # Get the latest benchmark run that completed (success or failure)
          LATEST_RUN=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.name == "Benchmark by Framework") | select(.conclusion == "success" or .conclusion == "failure") | .id' \
            | head -1)

          if [ -n "$LATEST_RUN" ]; then
            echo "Downloading artifacts from run: $LATEST_RUN"
            gh run download "$LATEST_RUN" --pattern "*benchmark*" --dir downloaded-results/ || echo "⚠️ Some artifacts may not be available"
          else
            echo "No benchmark runs found, checking comprehensive benchmarks..."
            # Try comprehensive benchmarks as fallback
            COMP_RUN=$(gh api repos/${{ github.repository }}/actions/runs \
              --jq '.workflow_runs[] | select(.name == "Comprehensive Benchmarks") | select(.conclusion == "success" or .conclusion == "failure") | .id' \
              | head -1)

            if [ -n "$COMP_RUN" ]; then
              echo "Downloading artifacts from comprehensive benchmark run: $COMP_RUN"
              gh run download "$COMP_RUN" --pattern "*benchmark*" --dir downloaded-results/ || echo "⚠️ Some artifacts may not be available"
            else
              echo "⚠️ No benchmark runs found - will create basic page"
              mkdir -p downloaded-results
            fi
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Aggregate Results
        run: |
          # Find all result directories
          RESULT_DIRS=""
          for dir in downloaded-results/*/; do
            if [ -f "${dir}benchmark_results.json" ]; then
              RESULT_DIRS="$RESULT_DIRS $dir"
            fi
          done

          if [ -n "$RESULT_DIRS" ]; then
            echo "Aggregating results from: $RESULT_DIRS"
            uv run python -m src.cli aggregate $RESULT_DIRS --output-dir aggregated-results
          else
            echo "⚠️ No valid result directories found - creating empty aggregated results"
            mkdir -p aggregated-results
            echo '{"frameworks": [], "categories": [], "results": [], "metadata": {"timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "note": "No benchmark results available"}}' > aggregated-results/aggregated_results.json
            echo '[]' > aggregated-results/all_summaries.json
          fi

      - name: Generate Reports
        run: |
          # Check if we have local pages first (manually published reports)
          if [ -d "pages" ] && [ -f "pages/index.html" ]; then
            echo "✅ Using existing pages from repository"
            mkdir -p public
            cp -r pages/* public/
            echo "Published reports found and copied to public/"
            ls -la public/
          else
            # Generate reports using existing CLI
            echo "Generating HTML and JSON reports..."
            mkdir -p public public/charts

            if [ -f "aggregated-results/aggregated_results.json" ]; then
              # Try to generate reports, but continue even if it fails
              if uv run python -m src.cli report \
                --aggregated-file aggregated-results/aggregated_results.json \
                --output-format html \
                --output-dir public; then
                echo "✅ HTML report generated"
              else
                echo "⚠️ HTML report failed, creating basic page"
                echo '<!DOCTYPE html><html><head><title>Benchmark Results</title></head><body><h1>📊 Benchmark Results</h1><p>⚠️ No valid benchmark data available for reporting.</p></body></html>' > public/index.html
              fi

              if uv run python -m src.cli report \
                --aggregated-file aggregated-results/aggregated_results.json \
                --output-format json \
                --output-dir public; then
                echo "✅ JSON report generated"
              else
                echo "⚠️ JSON report failed, creating basic file"
                echo '{"error": "No valid data for reporting"}' > public/benchmark_metrics.json
              fi

              # Try to generate visualizations
              if uv run python -m src.cli visualize \
                --aggregated-file aggregated-results/aggregated_results.json \
                --output-dir public/charts; then
                echo "✅ Visualizations generated"
              else
                echo "⚠️ Visualizations failed, creating placeholder"
                echo '{"error": "No visualizations available"}' > public/charts/placeholder.json
              fi
            else
              echo "⚠️ No aggregated results found, creating basic page"
              echo '<!DOCTYPE html><html><head><title>Benchmark Results</title></head><body><h1>📊 Benchmark Results</h1><p>⚠️ No benchmark data available. Check back later.</p></body></html>' > public/index.html
              echo '{"error": "No aggregated results"}' > public/benchmark_metrics.json
              echo '{"error": "No visualizations available"}' > public/charts/placeholder.json
            fi

            echo "Reports generated successfully"
            ls -la public/
          fi

      - name: Create 404 Page
        run: |
          cp public/index.html public/404.html

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
